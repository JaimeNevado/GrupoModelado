model P2

-----------clases-------------

class Taller
end

class TallerOficial < Taller
attributes
garantiaDeTiempo : Integer
end

class Viaje
attributes
fechaSalida : Integer
fechaLlegada : Integer 
numKmTotales : Integer derive : (self.formadoPor.numKm)
end

class Ciudad
end

class Revision
attributes
fechaInicio : Integer
fechaFin : Integer
end

class Coche < ActiveObject
attributes
fechaMatriculacion : Integer
garantia : Boolean
mantenimiento : Boolean
numKmRecorridos : Real
end

class Clock
attributes
NOW : Integer
end

abstract class ActiveObject
    operations
        tick()
end


----------relaciones-------------

association Time between
    Clock [1] role clock
    ActiveObject [*] role ao ordered
end    

association Ubicacion between
    Taller [*] role talleres
    Ciudad [1] role estaEn
end

association revisionTaller between
    Taller [1] role ocurre
    Revision [*] role tieneLugar
end

association estacionado between
    Coche [*] role ubicadoEn
    Ciudad [0..1] role aparcado
end

association revisionCoche between
    Revision [*] role revisiones
    Coche [1] role enRevision
end

association viaje between
    Coche [*] role coches
    Viaje [*] role viajes
end

association ruta between
    Recorrido [1] role formadoPor
    Viaje [*] role esParteDe
end




--------fin de relaciones-------------
-----------clases de asociacion-------------

associationclass Recorrido between
  Ciudad [*] role destino
  Ciudad [*] role salida
attributes
numKm : Integer 
    init = 5
end



-----------Invariantes---------

--4. Fecha inicio revision >= fecha de matriculación
context Coche
    inv fechaRevisionMayorFechaMatriculacion : 
        self.revisionCoche->forAll(r | r.fechaInicio >= self.fechaMatriculacion)

--5. Solo una revision en cada momento
    inv revisionesNoSeSuperponen:
        self.revisionCoche->forAll(r1, r2 |
            r1 <> r2 implies (r1.fechaFin <= r2.fechaInicio or r2.fechaFin <= r1.fechaInicio)
        )

--7. si coche esta en revision, la localización del coche debe ser la misma que la localización del taller que lo está revisando
    inv cocheUbicadoEnCiudadDelTallerDuranteRevision:
        self.revisionCoche->exists(r |
            r.fechaInicio <= Clock.allInstances()->any(true).NOW and
            r.fechaFin >= Clock.allInstances()->any(true).NOW and
            self.ubicadoEn = r.tieneLugar.ocurre.estaEn
        )

--8. Si el coche está viajando, tenemos fecha de salida pero no de llegada (null)
    inv fechaLlegadaNullSiCocheEnViaje:
        self.viajes->forAll(v |
            (v.fechaSalida <= Clock.allInstances()->any(true).NOW and v.fechaLlegada = null) implies
            self.viajes->exists(v | v.fechaLlegada = null)
        )

--9. El coche está o viajando o en ciudad
    inv cocheViajandoOEnCiudad:
            (self.viajes->exists(v | v.fechaSalida <= Clock.allInstances()->any(true).NOW 
                and v.fechaLlegada = null) implies self.ubicadoEn = null)
            and (self.ubicadoEn <> null 
                implies self.viajes->forAll(v | v.fechaLlegada <> null or v.fechaSalida > Clock.allInstances()->any(true).NOW))

--10 y 12. Si el numero de viajes del coche es >= 1 y no está viajando, entonces debe estar en la última ciudad que llegó
--NO ESTOY SEGURA PROBAR
    inv cocheUbicadoEnUltimaCiudadSiNoViajando:
            (self.viajes->size() >= 1 and 
            self.viajes->forAll(v | v.fechaLlegada <> null)) implies 
                self.ubicadoEn = self.viajes->sortedBy(v | v.fechaLlegada)->last().formadoPor.destino->any(true)

--11. La fecha de inicio de viaje2 debe ser >= que la fecha de fin del viaje1 siempre y cuand vel viaje1 ya haya acabado (viaje1.finViaje ! = null)
    inv viajesNoSolapados:
            self.viajes->forAll(v1, v2 |
                v1 <> v2 and v1.fechaLlegada <> null and v1.fechaLlegada <= v2.fechaSalida
            )

--15. Esta en Garantia si (now - fechaMatriculacion <= 400 días) y (now - fechaFinTaller <= garantíaTaller)
    inv estaEnGarantia:
            self.garantia = 
                (Clock.allInstances()->any(true).NOW - self.fechaMatriculacion <= 400 and
                self.revisionCoche->exists(r | r.fechaFin <> null and
                Clock.allInstances()->any(true).NOW - r.fechaFin <= TallerOficial.allInstances()->any(true).garantiaDeTiempo))

--16. NO esta en Mantenimiento si (now - fechaMatriculacion <= 400) y SI necesita mantenimiento si (now - fechaFinTaller >= 100)
    inv estadoMantenimiento:
            if Clock.allInstances()->any(true).NOW - self.fechaMatriculacion <= 400 then
                self.mantenimiento = false
            else
                self.mantenimiento = self.revisionCoche->exists(r | r.fechaFin <> null and
                    Clock.allInstances()->any(true).NOW - r.fechaFin >= 100)
            endif