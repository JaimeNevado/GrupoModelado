model P2

-----------clases-------------

class Taller
end

class TallerOficial < Taller
attributes
garantiaDeTiempo : Integer
end

class Viaje
attributes
fechaSalida : Integer
fechaLlegada : Integer 
numKmTotales : Integer derive : (self.formadoPor.numKm)
kmEnViaje : Integer
    init = 0
end

class Ciudad
end

class Revision
attributes
fechaInicio : Integer
fechaFin : Integer
end

class Mantenimiento < Revision
end

class Averia < Revision
end

class Coche < ActiveObject
attributes
fechaMatriculacion : Integer
garantia : Boolean derive : (self.clock.NOW - self.fechaMatriculacion <= 400 or self.revisiones -> exists(r | r.ocurre.oclIsTypeOf(TallerOficial) and self.clock.NOW  - r.fechaFin    <= r.ocurre.oclAsType(TallerOficial).garantiaDeTiempo))
mantenimiento : Boolean derive : (self.clock.NOW - self.fechaMatriculacion > 400 and self.revisiones -> exists(r | r.oclIsTypeOf(Mantenimiento) and self.clock.NOW - r.fechaFin >= 100))
numKmRecorridos : Real init = 0
velocidad : Integer

operations
    comienzaViaje(recorrido : Recorrido)
        begin
            declare viaje : Viaje;
            viaje := new Viaje();
            viaje.fechaSalida := self.clock.NOW;
            viaje.numKmTotales := recorrido.numKm;
            insert(self, viaje) into ViajeCoche;
            insert(recorrido, viaje) into Ruta;
            delete(self, self.aparcado) from Estacionado;
        end
        pre empiezaEnCiudad : (self.aparcado = recorrido.salida)
        pre noEstaEnTaller : (self.revisiones->isEmpty() or self.revisiones -> sortedBy(fechaFin)->last().fechaFin < self.clock.NOW)
        post noEstaEstacionadoEnCiudad : (self.aparcado = null)

    finViaje()
        begin
        declare ultimoViaje : Viaje;
            ultimoViaje := self.viajes -> select(v | v.fechaLlegada = null) -> any(true);
            insert(self, ultimoViaje.formadoPor.destino) into Estacionado;
            self.numKmRecorridos := self.numKmRecorridos + ultimoViaje.kmEnViaje;
            ultimoViaje.fechaLlegada := self.clock.NOW;
        end

    -- Avanzar()
    action()
        begin
        declare ultimoViaje : Viaje;
        if (self.viajes -> select(v | v.fechaLlegada = null) -> size() > 0) then
            ultimoViaje := self.viajes -> select(v | v.fechaLlegada = null) -> any(true);        
            if (self.velocidad + ultimoViaje.kmEnViaje < ultimoViaje.numKmTotales) then
                ultimoViaje.kmEnViaje := ultimoViaje.kmEnViaje + self.velocidad;
            else
                ultimoViaje.kmEnViaje := ultimoViaje.kmEnViaje + (ultimoViaje.numKmTotales - ultimoViaje.kmEnViaje);
                self.finViaje();
            end;
        end;
        end
        --post

end  --Clase coche ends

class Clock
attributes
NOW : Integer
operations
    tick()
        begin
            self.NOW := self.NOW + 1;
            for o in self.ao do
                o.action();
            end;
        end
end

abstract class ActiveObject
    operations
        action()
            begin 
            end
end


----------relaciones-------------

association Time between
    Clock [1] role clock
    ActiveObject [*] role ao ordered
end    

association Ubicacion between
    Taller [*] role talleres
    Ciudad [1] role estaEn
end

association RevisionTaller between
    Taller [1] role ocurre
    Revision [*] role tieneLugar
end

association Estacionado between
    Coche [*] role ubicadoEn
    Ciudad [0..1] role aparcado
end

association RevisionCoche between
    Revision [*] role revisiones
    Coche [1] role enRevision
end

association ViajeCoche between
    Coche [1] role coches
    Viaje [*] role viajes
end

association Ruta between
    Recorrido [1] role formadoPor
    Viaje [*] role esParteDe
end


--------fin de relaciones-------------
-----------clases de asociacion-------------

associationclass Recorrido between
  Ciudad [*] role salida
  Ciudad [*] role destino
attributes
numKm : Integer 
    init = 5
end



-----------Invariantes---------
constraints

context Revision

inv cocheYTallerEstanEnLaMismaCiudad:
    self.enRevision.aparcado -> notEmpty() and (self.ocurre.estaEn = self.enRevision.aparcado)

context Ciudad

inv aLoSumoUnTallerOficial:
    self.talleres -> select(t | t.oclIsTypeOf(TallerOficial)) -> size() <= 1


--4. Fecha inicio revision >= fecha de matriculación
context Coche
    inv fechaRevisionMayorFechaMatriculacion : 
        self.revisiones -> forAll(r | r.fechaInicio >= self.fechaMatriculacion)

--5. Solo una revision en cada momento
    inv revisionesNoSeSuperponen:
        self.revisiones -> forAll(r1, r2 |
            r1 <> r2 implies (r1.fechaFin <= r2.fechaInicio or r2.fechaFin <= r1.fechaInicio)
        )

--7. si coche esta en revision, la localización del coche debe ser la misma que la localización del taller que lo está revisando
    -- inv cocheUbicadoEnCiudadDelTallerDuranteRevision:
    --     self.revisiones -> isEmpty() or self.revisiones -> select(r |
    --         r.fechaInicio <= self.clock.NOW and
    --         r.fechaFin >= self.clock.NOW and
    --         self.aparcado = r.ocurre.estaEn 
    --     )

--8. Si el coche está viajando, tenemos fecha de salida pero no de llegada (null)
    inv fechaLlegadaNullSiCocheEnViaje:
        self.aparcado = null implies
            self.viajes -> exists(v | v.fechaSalida <> null and v.fechaLlegada = null)

--9. El coche está o viajando o en ciudad
    inv cocheViajandoOEnCiudad:
            (self.viajes -> exists(v | v.fechaSalida <= self.clock.NOW 
                and v.fechaLlegada = null) and self.aparcado = null)
            or (not(self.viajes -> exists(v | v.fechaSalida <= self.clock.NOW 
                and v.fechaLlegada = null)) and self.aparcado <> null)

--10 y 12. Si el numero de viajes del coche es >= 1 y no está viajando, entonces debe estar en la última ciudad que llegó
--NO ESTOY SEGURA PROBAR
    inv cocheUbicadoEnUltimaCiudadSiNoViajando:
            (self.viajes -> size() >= 1 and 
            self.viajes -> forAll(v | v.fechaLlegada <> null)) implies 
                self.aparcado = self.viajes -> sortedBy(v | v.fechaLlegada) -> last().formadoPor.destino

--11. La fecha de inicio de viaje2 debe ser >= que la fecha de fin del viaje1 siempre y cuand vel viaje1 ya haya acabado (viaje1.finViaje ! = null)
    --inv viajesNoSolapados:
      --      self.viajes -> forAll(v1, v2 |
        --        v1 <> v2 and v1.fechaLlegada <> null and v1.fechaLlegada <= v2.fechaSalida
          --  )

-- ESTA RESTRICCION NO ES VALIDA PORQUE NO PUEDE HABER MAS DE UN VIAJE RELACIONADO CON UN COCHE

--15. Esta en Garantia si (now - fechaMatriculacion <= 400 días) y (now - fechaFinTaller <= garantíaTaller)
    -- inv estaEnGarantia:
    --         self.garantia = 
    --             (self.clock.NOW - self.fechaMatriculacion <= 400 and
    --             self.revisiones -> exists(r | r.ocurre.oclIsTypeOf(TallerOficial) and self.clock.NOW  - r.fechaFin 
    --             <= r.ocurre.oclAsType(TallerOficial).garantiaDeTiempo))

--16. NO esta en Mantenimiento si (now - fechaMatriculacion <= 400) y SI necesita mantenimiento si (now - fechaFinTaller >= 100)
    -- inv estadoMantenimiento:
    --         self.mantenimiento = (self.clock.NOW - self.fechaMatriculacion > 400 and
    --             self.revisiones -> exists(r | self.clock.NOW - r.fechaFin >= 100))
                --self.clock.NOW - self.revisiones -> sortedBy(r| r.fechaFin) -> last().fechaFin >= 100

-- Fecha llegada = = null ?? y revision = = mantenimiento ??
-- Km de coche son en horas o en dias???